<?php

require ('club_base.interface.inc');

/**
 * @file
 * Implements interface from Club Membership using Cron
 */

/**
 * Copied from "Example using Cron API, including hook_cron() and hook_cron_queue_info().
 *
 */

/**
 * Implementation of hook_help().
 */
function club_base_help($path, $arg) {
  switch ($path) {
    case 'admin/help#club_base':
      return t('Interfaces Club Membership data on demand, and controls how frequently CRON is run.');
  }
}  //  End of club_base_help().


/**
 * Implements hook_menu().
 */
function club_base_menu() {

  $items['admin/config/system/club_base'] = array(
    'title' => 'Club Membership Interface',
    'description' => 'Run Club Membership functions on demand, or set frequency of interface',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('club_base_form'),
    'access arguments' => array('administer users'),
    'access callback' => TRUE,
  );

  return $items;
}

/*
 * club_base_get_chapter
 * function to retrieve chapter based on logged in user
 */
function club_base_get_chapter() {
  global $user;
  $node = user_load($user->uid);

  // If the user's chapter is set, return it
  if (isset($node->field_chapter['und'][0]['target_id'])) {  // logged in user
    return $node->field_chapter['und'][0]['target_id'];

  // else if the attendance module is installed and the default field_chapter is set, return it
  } elseif (function_exists('attendance_get_config')) {  // attendance module installed
    $config = attendance_get_config();
    if (isset($config->field_chapter['und'][0]['target_id'])) {
      return $config->field_chapter['und'][0]['target_id'];
    }
  }

  // No user chapter & no default; so, get the first Chapter/club record
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', 'chapter');
  $result = $query->execute();
  if (isset($result['node'])) {
    return current(array_keys($result['node']));
  }
}


/**
 * Return concatenated user names, given the user profile
 */
function club_base_user_name ($user) {
  // first ' ' middle ' ' last ' ' suffix
  $name = '';

  // First Name
    if (isset($user->field_first_name['und'])) {
       $name .= $user->field_first_name['und'][0]['value'] . ' ';
    }

  // Middle Name
    if (isset($user->field_middle_initial['und'])) {
       $name .= $user->field_middle_initial['und'][0]['value'] . ' ';
    }

  // Last Name
    if (isset($user->field_last_name['und'])) {
       $name .= $user->field_last_name['und'][0]['value'] . ' ';
    }

  // Suffix
    if (isset($user->field_suffix['und'])) {
       $name .= $user->field_suffix['und'][0]['value'] . ' ';
    }
  
  return $name;
}

/**
 * Retreive field collection item "phone" for a particular user
 * returns an array of phone numbers including the phone, the type and the location
 */
function club_base_get_phone ($uid) {

  $profile = profile2_load_by_user($uid,'main');
  $fieldset = 'field_contact_phone';
  $key1 = 'field_phone';
  $key2 = 'field_phone_type';
  $key3 = 'field_phone_location';

  $phones = field_get_items('profile2', $profile, $fieldset);

  $ph = array();
  if (!empty($phones)) {
    foreach ($phones as $phone) {
      if (!empty($phone['value'])) {
        $field_collection = field_collection_field_get_entity($phone['value']);
        if ($field_collection) {
          $line = array();

          $items = field_get_items('field_collection_item', $field_collection, $key1);
          if ($items) {
             $item = reset($items);
             $number = substr($item['number'],0,3).'-'.substr($item['number'],3,3).'-'.substr($item['number'],6,4);
             $line['number'] = substr($item['number'],0,3).'-'.substr($item['number'],3,3).'-'.substr($item['number'],6,4);
          }

          $items = field_get_items('field_collection_item', $field_collection, $key2);
          if ($items) {
             $item = reset($items);
             $line['type'] = ' '.taxonomy_term_load($item['tid'])->name;
          }

          $items = field_get_items('field_collection_item', $field_collection, $key3);
          if ($items) {
             $item = reset($items);
             $line['location'] = ' '.taxonomy_term_load($item['tid'])->name;
          }
        }
        $ph[] = $line;
      }
    }
  }
  return $ph;
}
/**
 * The form to provide a link to cron.php.
 */
function club_base_form($form, &$form_state) {
  $form['status'] = array(
    '#type' => 'fieldset',
    '#title' => t('Club Membership "Cron" status information'),
  );
  $form['status']['intro'] = array(
    '#markup' => '<div>' . t('This job controls how often the Club Membership cron jobs are run. You can run this job each time a new member is added, or adjust the frequency. The frequency is initially set to once a day. If you have administrative privileges you can run cron from this page and see the results.') . '</div>',
  );
  $form['status']['last'] = array(
    '#markup' => '<div>' . t('club_base_cron() will next execute the first time cron runs after %time (%seconds seconds from now)' . '</div>',
      array(
        '%time' => date_iso8601(variable_get('club_base_next_execution', time())),
        '%seconds' => variable_get('club_base_next_execution', time()) - time(),
      )
    ),
  );

  if (user_access('administer site configuration')) {
    $form['cron_run'] = array(
      '#type' => 'fieldset',
      '#title' => t('Run cron manually'),
    );
    $form['cron_run']['cron_reset'] = array(
      '#type' => 'checkbox',
      '#title' => t("Run club_base's cron regardless of whether interval has expired."),
      '#default_value' => TRUE,
    );
    $form['cron_run']['cron_trigger'] = array(
      '#type' => 'submit',
      '#value' => t('Run cron now'),
      '#submit' => array('club_base_form_cron_run_submit'),
    );
  }

  $form['cron_queue_setup'] = array(
    '#type' => 'fieldset',
    '#title' => t('Cron queue setup (for hook_cron_queue_info(), etc.)'),
  );
  $queue_1 = DrupalQueue::get('club_base_queue_1');
  $queue_2 = DrupalQueue::get('club_base_queue_2');
  $form['cron_queue_setup']['current_cron_queue_status'] = array(
    '#markup' => '<div>' . t('There are currently %queue_1 items in queue 1 and %queue_2 items in queue 2',
      array(
        '%queue_1' => $queue_1->numberOfItems(),
        '%queue_2' => $queue_2->numberOfItems(),
      )) . '</div>',
  );
  $form['cron_queue_setup']['num_items'] = array(
    '#type' => 'select',
    '#title' => t('Number of items to add to queue'),
    '#options' => drupal_map_assoc(array(1, 5, 10, 100, 1000)),
    '#default_value' => 5,
  );
  $form['cron_queue_setup']['queue'] = array(
    '#type' => 'radios',
    '#title' => t('Queue to add items to'),
    '#options' => array(
      'club_base_queue_1' => t('Queue 1'),
      'club_base_queue_2' => t('Queue 2'),
    ),
    '#default_value' => 'club_base_queue_1',
  );
  $form['cron_queue_setup']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add jobs to queue'),
    '#submit' => array('club_base_add_jobs_to_queue'),
  );

  $form['configuration'] = array(
    '#type' => 'fieldset',
    '#title' => t('Configuration of club_base_cron()'),
  );
  $form['configuration']['club_base_interval'] = array(
    '#type' => 'select',
    '#title' => t('Cron interval'),
    '#description' => t('Time after which club_base_cron will respond to a processing request.'),
    '#default_value' => variable_get('club_base_interval', 60*60),
    '#options' => array(
      60 => t('1 minute'),
      300 => t('5 minutes'),
      3600 => t('1 hour'),
      60*60*24 => t('1 day'),
    ),
  );

  return system_settings_form($form);
}

/**
 * Allow user to directly execute cron, optionally forcing it.
 */
function club_base_form_cron_run_submit($form, &$form_state) {
  if (!empty($form_state['values']['cron_reset'])) {
    variable_set('club_base_next_execution', 0);
  }

  // We don't usually use globals in this way. This is used here only to
  // make it easy to tell if cron was run by this form.
  $GLOBALS['club_base_show_status_message'] = TRUE;
  if (drupal_cron_run()) {
    drupal_set_message(t('Cron ran successfully.'));
  }
  else {
    drupal_set_message(t('Cron run failed.'), 'error');
  }
}

/**
 * #submit function used to add the items to the queue when signaled by
 * the form.
 */
function club_base_add_jobs_to_queue($form, &$form_state) {
  $queue = $form_state['values']['queue'];
  $num_items = $form_state['values']['num_items'];

  $queue = DrupalQueue::get($queue);
  for ($i=1; $i <= $num_items; $i++) {
    $item = new stdClass();
    $item->created = time();
    $item->sequence = $i;
    $queue->createItem($item);
  }
}
/**
 * Implements hook_cron().
 *
 * hook_cron() is the traditional (pre-Drupal 7) hook for doing "background"
 * processing. It gets called every time the Drupal cron runs and must decide
 * what it will do.
 *
 * In this example, it does a watchdog() call after the time named in
 * the variable 'club_base_next_execution' has arrived, and then it
 * resets that variable to a time in the future.
 */
function club_base_cron() {
  // Default to an hourly interval. Of course, cron has to be running at least
  // hourly for this to work.
  $interval = variable_get('club_base_interval', 60*60);
  // We usually don't want to act every time cron runs (which could be every
  // minute) so keep a time for the next run in a variable.

  if (time() >= variable_get('club_base_next_execution', 0)) {
    // This is a silly example of a cron job.
    // It just makes it obvious that the job has run without
    // making any changes to your database.
    club_base_interface();
    watchdog('club_base', 'club_base interface ran');
    if (!empty($GLOBALS['club_base_show_status_message'])) {
      drupal_set_message(t('club_base executed at %time', array('%time' => date_iso8601(time(0)))));
    }
    variable_set('club_base_next_execution', time() + $interval);
  }
}


/**
 * Implements hook_cron_queue_info().
 *
 * hook_cron_queue_info() and family are new since Drupal 7, and allow any
 * process to add work to the queue to be acted on when cron runs. Queues are
 * described and worker callbacks are provided, and then only the worker
 * callback needs to be implemented.
 *
 * All the details of queue use are done by the cron_queue implementation, so
 * one doesn't need to know much about DrupalQueue().
 *
 * @see queue_example.module
 */
function club_base_cron_queue_info() {
  $queues['club_base_queue_1'] = array(
    'worker callback' => 'club_base_queue_1_worker',
    'time' => 1, // One second max runtime per cron run.
  );
  $queues['club_base_queue_2'] = array(
    'worker callback' => 'club_base_queue_2_worker',
    'time' => 10,
  );
  return $queues;
}

/**
 * Simple workers for the two queues.
 *
 * @param $item
 *   Any object to be worked on.
 */
function club_base_queue_1_worker($item) {
  club_base_queue_report_work(1, $item);
}
function club_base_queue_2_worker($item) {
  club_base_queue_report_work(2, $item);
}

/**
 * Simple reporter for the workers.
 *
 * @param $worker
 *   (integer) worker number
 * @param $item
 *   (object) the $item which was stored in the cron queue.
 */
function club_base_queue_report_work($worker, $item) {
  if (!empty($GLOBALS['club_base_show_status_message'])) {
    drupal_set_message(t('Queue @worker worker processed item with sequence @sequence created at @time', array('@worker' => $worker, '@sequence' => $item->sequence, '@time' => date_iso8601($item->created))));
  }
  watchdog('club_base', 'Queue @worker worker processed item with sequence @sequence created at @time', array('@worker' => $worker, '@sequence' => $item->sequence, '@time' => date_iso8601($item->created)));
}

/**
 * @} End of "defgroup club_base".
 */
