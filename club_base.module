<?php

require ('club_base.interface.inc');
require ('club_base.functions.inc');

// if attendance modules is installed
if (module_exists(club_attendance)) {
  require ('club_base.attendance.includes.inc');
  require ('club_base.attendance.functions.inc');
}

// if network module is installed
if (module_exists(club_networking)) {
  require ('club_base.network.functions.inc');
}

/**
 * @file
 * Implements interface from Club Membership using Cron
 */

/**
 * Copied from "Example using Cron API, including hook_cron() and hook_cron_queue_info().
 *
 */

/**
 * Implementation of hook_help().
 */
function club_base_help($path, $arg) {
  switch ($path) {
    case 'admin/help#club_base':
      return t('Interfaces Club Membership data on demand, and controls how frequently CRON is run.');
  }
}  //  End of club_base_help().


/**
 * Implements hook_menu().
 */
function club_base_menu() {

  $items['admin/config/system/club_base'] = array(
    'title' => 'Club Membership Interface',
    'description' => 'Run Club Membership functions on demand, or set frequency of interface',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('club_base_form'),
    'access arguments' => array('administer users'),
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * The form to provide a link to cron.php.
 */
function club_base_form($form, &$form_state) {
  $form['status'] = array(
    '#type' => 'fieldset',
    '#title' => t('Club Membership "Cron" status information'),
  );
  $form['status']['intro'] = array(
    '#markup' => '<div>' . t('This job controls how often the Club Membership cron jobs are run. You can run this job each time a new member is added, or adjust the frequency. The frequency is initially set to once a day. If you have administrative privileges you can run cron from this page and see the results.') . '</div>',
  );
  $form['status']['last'] = array(
    '#markup' => '<div>' . t('club_base_cron() will next execute the first time cron runs after %time (%seconds seconds from now)' . '</div>',
      array(
        '%time' => date_iso8601(variable_get('club_base_next_execution', time())),
        '%seconds' => variable_get('club_base_next_execution', time()) - time(),
      )
    ),
  );

  if (user_access('administer site configuration')) {
    $form['cron_run'] = array(
      '#type' => 'fieldset',
      '#title' => t('Run cron manually'),
    );
    $form['cron_run']['cron_reset'] = array(
      '#type' => 'checkbox',
      '#title' => t("Run club_base's cron regardless of whether interval has expired."),
      '#default_value' => TRUE,
    );
    $form['cron_run']['cron_trigger'] = array(
      '#type' => 'submit',
      '#value' => t('Run cron now'),
      '#submit' => array('club_base_form_cron_run_submit'),
    );
  }

  // Set the default chapter. If this is set, it overrides the user's chapter
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
            ->propertyCondition('status',1)
            ->entityCondition('bundle', 'chapter');
  $result = $query->execute();
  $option = array();
  $defaults = array();
  $option['None'] = 'None';
  if (isset($result['node'])) {
    foreach(array_keys($result['node']) as $key) {
      $node = node_load($key);
      $option[$key] = $node->title;
      $defaults[$key] = $node->title;
    };
  }

  $form['default_chapter'] = array(
    '#type' => 'fieldset',
    '#title' => t('Configuration of default chapter'),
  );
  $form['default_chapter']['club_default_chapter'] = array(
    '#type' => 'select',
    '#title' => t('Default Chapter'),
    '#description' => t('Default chapter, or NONE'),
    '#default_value' => variable_get('club_default_chapter', 'None'),
    '#options' => $option,
  );

  // Set a chapter to obtain defaults from
  if (variable_get('club_default_chapter') == 'None') {
    $form['no_chapter_defaults'] = array(
      '#type' => 'fieldset',
      '#title' => t('Configuration of defaults if "None" is selected'),
    );
    $form['default_chapter']['no_chapter_defaults'] = array(
      '#type' => 'select',
      '#title' => t('Chapter Defaults if "None" selected'),
      '#description' => t('Chapter Defaults if "None" selected'),
      '#default_value' => variable_get('no_chapter_defaults',variable_get('club_default_chapter')),
      '#options' => $defaults,
    );
  }

  $form['configuration'] = array(
    '#type' => 'fieldset',
    '#title' => t('Configuration of club_base_cron()'),
  );
  $form['configuration']['club_base_interval'] = array(
    '#type' => 'select',
    '#title' => t('Cron interval'),
    '#description' => t('Time after which club_base_cron will respond to a processing request.'),
    '#default_value' => variable_get('club_base_interval', 60*60*24),
    '#options' => array(
      60 => t('1 minute'),
      300 => t('5 minutes'),
      3600 => t('1 hour'),
      60*60*24 => t('1 day'),
    ),
  );

  return system_settings_form($form);
}

/**
 * Allow user to directly execute cron, optionally forcing it.
 */
function club_base_form_cron_run_submit($form, &$form_state) {
  if (!empty($form_state['values']['cron_reset'])) {
    variable_set('club_base_next_execution', 0);
  }

  // We don't usually use globals in this way. This is used here only to
  // make it easy to tell if cron was run by this form.
  $GLOBALS['club_base_show_status_message'] = TRUE;
  if (drupal_cron_run()) {
    drupal_set_message(t('Cron ran successfully.'));
  }
  else {
    drupal_set_message(t('Cron run failed.'), 'error');
  }
}

/**
 * #submit function used to add the items to the queue when signaled by
 * the form.
 */
function club_base_add_jobs_to_queue($form, &$form_state) {
  $queue = $form_state['values']['queue'];
  $num_items = $form_state['values']['num_items'];

  $queue = DrupalQueue::get($queue);
  for ($i=1; $i <= $num_items; $i++) {
    $item = new stdClass();
    $item->created = time();
    $item->sequence = $i;
    $queue->createItem($item);
  }
}
/**
 * Implements hook_cron().
 *
 * hook_cron() is the traditional (pre-Drupal 7) hook for doing "background"
 * processing. It gets called every time the Drupal cron runs and must decide
 * what it will do.
 *
 * In this example, it does a watchdog() call after the time named in
 * the variable 'club_base_next_execution' has arrived, and then it
 * resets that variable to a time in the future.
 */
function club_base_cron() {
  // Default to an hourly interval. Of course, cron has to be running at least
  // hourly for this to work.
  $interval = variable_get('club_base_interval', 60*60);
  // We usually don't want to act every time cron runs (which could be every
  // minute) so keep a time for the next run in a variable.

  if (time() >= variable_get('club_base_next_execution', 0)) {
    // This is a silly example of a cron job.
    // It just makes it obvious that the job has run without
    // making any changes to your database.
    club_base_interface();
    watchdog('club_base', 'club_base interface ran');
    if (!empty($GLOBALS['club_base_show_status_message'])) {
      drupal_set_message(t('club_base executed at %time', array('%time' => date_iso8601(time(0)))));
    }
    variable_set('club_base_next_execution', time() + $interval);
  }
}


/**
 * Implements hook_cron_queue_info().
 *
 * hook_cron_queue_info() and family are new since Drupal 7, and allow any
 * process to add work to the queue to be acted on when cron runs. Queues are
 * described and worker callbacks are provided, and then only the worker
 * callback needs to be implemented.
 *
 * All the details of queue use are done by the cron_queue implementation, so
 * one doesn't need to know much about DrupalQueue().
 *
 * @see queue_example.module
 */
function club_base_cron_queue_info() {
  $queues['club_base_queue_1'] = array(
    'worker callback' => 'club_base_queue_1_worker',
    'time' => 1, // One second max runtime per cron run.
  );
  $queues['club_base_queue_2'] = array(
    'worker callback' => 'club_base_queue_2_worker',
    'time' => 10,
  );
  return $queues;
}

/**
 * Simple workers for the two queues.
 *
 * @param $item
 *   Any object to be worked on.
 */
function club_base_queue_1_worker($item) {
  club_base_queue_report_work(1, $item);
}
function club_base_queue_2_worker($item) {
  club_base_queue_report_work(2, $item);
}

/**
 * Simple reporter for the workers.
 *
 * @param $worker
 *   (integer) worker number
 * @param $item
 *   (object) the $item which was stored in the cron queue.
 */
function club_base_queue_report_work($worker, $item) {
  if (!empty($GLOBALS['club_base_show_status_message'])) {
    drupal_set_message(t('Queue @worker worker processed item with sequence @sequence created at @time', array('@worker' => $worker, '@sequence' => $item->sequence, '@time' => date_iso8601($item->created))));
  }
  watchdog('club_base', 'Queue @worker worker processed item with sequence @sequence created at @time', array('@worker' => $worker, '@sequence' => $item->sequence, '@time' => date_iso8601($item->created)));
}

/**
 * @} End of "defgroup club_base".
 */
